// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2024 13:49:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Nhi_A0;
reg Nhi_A1;
reg Nhi_B0;
reg Nhi_B1;
// wires                                               
wire Nhi_A_greater_than_B;

// assign statements (if any)                          
Assignment1 i1 (
// port map - connection between master ports and signals/registers   
	.Nhi_A0(Nhi_A0),
	.Nhi_A1(Nhi_A1),
	.Nhi_A_greater_than_B(Nhi_A_greater_than_B),
	.Nhi_B0(Nhi_B0),
	.Nhi_B1(Nhi_B1)
);
initial 
begin 
#200000 $finish;
end 

// Nhi_A1
initial
begin
	Nhi_A1 = 1'b0;
	Nhi_A1 = #80000 1'b1;
	Nhi_A1 = #80000 1'b0;
end 

// Nhi_A0
initial
begin
	Nhi_A0 = 1'b0;
	Nhi_A0 = #40000 1'b1;
	Nhi_A0 = #40000 1'b0;
	Nhi_A0 = #40000 1'b1;
	Nhi_A0 = #40000 1'b0;
end 

// Nhi_B1
initial
begin
	Nhi_B1 = 1'b0;
	Nhi_B1 = #20000 1'b1;
	Nhi_B1 = #20000 1'b0;
	Nhi_B1 = #20000 1'b1;
	Nhi_B1 = #20000 1'b0;
	Nhi_B1 = #20000 1'b1;
	Nhi_B1 = #20000 1'b0;
	Nhi_B1 = #20000 1'b1;
	Nhi_B1 = #20000 1'b0;
end 

// Nhi_B0
initial
begin
	Nhi_B0 = 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
	Nhi_B0 = #10000 1'b1;
	Nhi_B0 = #10000 1'b0;
end 
endmodule

