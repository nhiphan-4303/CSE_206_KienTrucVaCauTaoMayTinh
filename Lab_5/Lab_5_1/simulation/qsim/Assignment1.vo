// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 19.1.0 Build 670 09/22/2019 SJ Lite Edition"

// DATE "05/21/2024 15:12:33"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Assignment1 (
	HanhNhi_D,
	HanhNhi_A,
	HanhNhi_EN);
output 	[3:0] HanhNhi_D;
input 	[1:0] HanhNhi_A;
input 	HanhNhi_EN;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \HanhNhi_D[3]~output_o ;
wire \HanhNhi_D[2]~output_o ;
wire \HanhNhi_D[1]~output_o ;
wire \HanhNhi_D[0]~output_o ;
wire \HanhNhi_A[0]~input_o ;
wire \HanhNhi_A[1]~input_o ;
wire \HanhNhi_EN~input_o ;
wire \inst5~combout ;
wire \inst4~combout ;
wire \inst3~combout ;
wire \inst2~combout ;


cyclonev_io_obuf \HanhNhi_D[3]~output (
	.i(\inst5~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\HanhNhi_D[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \HanhNhi_D[3]~output .bus_hold = "false";
defparam \HanhNhi_D[3]~output .open_drain_output = "false";
defparam \HanhNhi_D[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \HanhNhi_D[2]~output (
	.i(\inst4~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\HanhNhi_D[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \HanhNhi_D[2]~output .bus_hold = "false";
defparam \HanhNhi_D[2]~output .open_drain_output = "false";
defparam \HanhNhi_D[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \HanhNhi_D[1]~output (
	.i(\inst3~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\HanhNhi_D[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \HanhNhi_D[1]~output .bus_hold = "false";
defparam \HanhNhi_D[1]~output .open_drain_output = "false";
defparam \HanhNhi_D[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \HanhNhi_D[0]~output (
	.i(\inst2~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\HanhNhi_D[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \HanhNhi_D[0]~output .bus_hold = "false";
defparam \HanhNhi_D[0]~output .open_drain_output = "false";
defparam \HanhNhi_D[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \HanhNhi_A[0]~input (
	.i(HanhNhi_A[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\HanhNhi_A[0]~input_o ));
// synopsys translate_off
defparam \HanhNhi_A[0]~input .bus_hold = "false";
defparam \HanhNhi_A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \HanhNhi_A[1]~input (
	.i(HanhNhi_A[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\HanhNhi_A[1]~input_o ));
// synopsys translate_off
defparam \HanhNhi_A[1]~input .bus_hold = "false";
defparam \HanhNhi_A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \HanhNhi_EN~input (
	.i(HanhNhi_EN),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\HanhNhi_EN~input_o ));
// synopsys translate_off
defparam \HanhNhi_EN~input .bus_hold = "false";
defparam \HanhNhi_EN~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb inst5(
// Equation(s):
// \inst5~combout  = (\HanhNhi_A[0]~input_o  & (\HanhNhi_A[1]~input_o  & \HanhNhi_EN~input_o ))

	.dataa(!\HanhNhi_A[0]~input_o ),
	.datab(!\HanhNhi_A[1]~input_o ),
	.datac(!\HanhNhi_EN~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst5~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst5.extended_lut = "off";
defparam inst5.lut_mask = 64'h0101010101010101;
defparam inst5.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst4(
// Equation(s):
// \inst4~combout  = (!\HanhNhi_A[0]~input_o  & (\HanhNhi_A[1]~input_o  & \HanhNhi_EN~input_o ))

	.dataa(!\HanhNhi_A[0]~input_o ),
	.datab(!\HanhNhi_A[1]~input_o ),
	.datac(!\HanhNhi_EN~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst4~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst4.extended_lut = "off";
defparam inst4.lut_mask = 64'h0202020202020202;
defparam inst4.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst3(
// Equation(s):
// \inst3~combout  = (\HanhNhi_A[0]~input_o  & (!\HanhNhi_A[1]~input_o  & \HanhNhi_EN~input_o ))

	.dataa(!\HanhNhi_A[0]~input_o ),
	.datab(!\HanhNhi_A[1]~input_o ),
	.datac(!\HanhNhi_EN~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst3~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst3.extended_lut = "off";
defparam inst3.lut_mask = 64'h0404040404040404;
defparam inst3.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst2(
// Equation(s):
// \inst2~combout  = (!\HanhNhi_A[0]~input_o  & (!\HanhNhi_A[1]~input_o  & \HanhNhi_EN~input_o ))

	.dataa(!\HanhNhi_A[0]~input_o ),
	.datab(!\HanhNhi_A[1]~input_o ),
	.datac(!\HanhNhi_EN~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst2~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst2.extended_lut = "off";
defparam inst2.lut_mask = 64'h0808080808080808;
defparam inst2.shared_arith = "off";
// synopsys translate_on

assign HanhNhi_D[3] = \HanhNhi_D[3]~output_o ;

assign HanhNhi_D[2] = \HanhNhi_D[2]~output_o ;

assign HanhNhi_D[1] = \HanhNhi_D[1]~output_o ;

assign HanhNhi_D[0] = \HanhNhi_D[0]~output_o ;

endmodule
