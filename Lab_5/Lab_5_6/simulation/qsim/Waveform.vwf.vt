// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/02/2024 22:07:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLEAR;
reg CLOCK;
reg [7:0] HanhNhi_A;
reg WREN;
// wires                                               
wire [7:0] HanhNhi_D;

// assign statements (if any)                          
Assignment6 i1 (
// port map - connection between master ports and signals/registers   
	.CLEAR(CLEAR),
	.CLOCK(CLOCK),
	.HanhNhi_A(HanhNhi_A),
	.HanhNhi_D(HanhNhi_D),
	.WREN(WREN)
);
initial 
begin 
#200000 $finish;
end 

// CLEAR
initial
begin
	CLEAR = 1'b0;
end 

// WREN
initial
begin
	WREN = 1'b1;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 
// HanhNhi_A[ 7 ]
initial
begin
	HanhNhi_A[7] = 1'b0;
end 
// HanhNhi_A[ 6 ]
initial
begin
	HanhNhi_A[6] = 1'b0;
end 
// HanhNhi_A[ 5 ]
initial
begin
	HanhNhi_A[5] = 1'b0;
end 
// HanhNhi_A[ 4 ]
initial
begin
	HanhNhi_A[4] = 1'b0;
	HanhNhi_A[4] = #160000 1'b1;
end 
// HanhNhi_A[ 3 ]
initial
begin
	HanhNhi_A[3] = 1'b0;
	HanhNhi_A[3] = #80000 1'b1;
	HanhNhi_A[3] = #80000 1'b0;
end 
// HanhNhi_A[ 2 ]
initial
begin
	repeat(2)
	begin
		HanhNhi_A[2] = 1'b0;
		HanhNhi_A[2] = #40000 1'b1;
		# 40000;
	end
	HanhNhi_A[2] = 1'b0;
end 
// HanhNhi_A[ 1 ]
always
begin
	HanhNhi_A[1] = 1'b0;
	HanhNhi_A[1] = #20000 1'b1;
	#20000;
end 
// HanhNhi_A[ 0 ]
always
begin
	HanhNhi_A[0] = 1'b0;
	HanhNhi_A[0] = #10000 1'b1;
	#10000;
end 
endmodule

