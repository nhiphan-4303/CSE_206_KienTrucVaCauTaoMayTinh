// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2024 15:48:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] HanhNhi_I0;
reg [7:0] HanhNhi_I1;
reg [7:0] HanhNhi_I2;
reg [7:0] HanhNhi_I3;
reg [7:0] HanhNhi_I4;
reg [7:0] HanhNhi_I5;
reg [7:0] HanhNhi_I6;
reg [7:0] HanhNhi_I7;
reg [2:0] HanhNhi_S;
// wires                                               
wire [7:0] HanhNhi_Y;

// assign statements (if any)                          
Assignment5 i1 (
// port map - connection between master ports and signals/registers   
	.HanhNhi_I0(HanhNhi_I0),
	.HanhNhi_I1(HanhNhi_I1),
	.HanhNhi_I2(HanhNhi_I2),
	.HanhNhi_I3(HanhNhi_I3),
	.HanhNhi_I4(HanhNhi_I4),
	.HanhNhi_I5(HanhNhi_I5),
	.HanhNhi_I6(HanhNhi_I6),
	.HanhNhi_I7(HanhNhi_I7),
	.HanhNhi_S(HanhNhi_S),
	.HanhNhi_Y(HanhNhi_Y)
);
initial 
begin 
#1000000 $finish;
end 
// HanhNhi_I0[ 7 ]
initial
begin
	HanhNhi_I0[7] = 1'b0;
end 
// HanhNhi_I0[ 6 ]
initial
begin
	HanhNhi_I0[6] = 1'b0;
end 
// HanhNhi_I0[ 5 ]
initial
begin
	HanhNhi_I0[5] = 1'b0;
end 
// HanhNhi_I0[ 4 ]
initial
begin
	HanhNhi_I0[4] = 1'b0;
end 
// HanhNhi_I0[ 3 ]
initial
begin
	HanhNhi_I0[3] = 1'b0;
end 
// HanhNhi_I0[ 2 ]
initial
begin
	HanhNhi_I0[2] = 1'b0;
end 
// HanhNhi_I0[ 1 ]
initial
begin
	HanhNhi_I0[1] = 1'b0;
	HanhNhi_I0[1] = #800000 1'b1;
end 
// HanhNhi_I0[ 0 ]
initial
begin
	HanhNhi_I0[0] = 1'b0;
	HanhNhi_I0[0] = #400000 1'b1;
	HanhNhi_I0[0] = #400000 1'b0;
end 
// HanhNhi_I1[ 7 ]
initial
begin
	HanhNhi_I1[7] = 1'b0;
end 
// HanhNhi_I1[ 6 ]
initial
begin
	HanhNhi_I1[6] = 1'b0;
end 
// HanhNhi_I1[ 5 ]
initial
begin
	HanhNhi_I1[5] = 1'b0;
	HanhNhi_I1[5] = #640000 1'b1;
end 
// HanhNhi_I1[ 4 ]
initial
begin
	HanhNhi_I1[4] = 1'b0;
	HanhNhi_I1[4] = #320000 1'b1;
	HanhNhi_I1[4] = #320000 1'b0;
	HanhNhi_I1[4] = #320000 1'b1;
end 
// HanhNhi_I1[ 3 ]
initial
begin
	repeat(3)
	begin
		HanhNhi_I1[3] = 1'b0;
		HanhNhi_I1[3] = #160000 1'b1;
		# 160000;
	end
	HanhNhi_I1[3] = 1'b0;
end 
// HanhNhi_I1[ 2 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I1[2] = 1'b0;
		HanhNhi_I1[2] = #80000 1'b1;
		# 80000;
	end
	HanhNhi_I1[2] = 1'b0;
end 
// HanhNhi_I1[ 1 ]
initial
begin
	repeat(12)
	begin
		HanhNhi_I1[1] = 1'b0;
		HanhNhi_I1[1] = #40000 1'b1;
		# 40000;
	end
	HanhNhi_I1[1] = 1'b0;
end 
// HanhNhi_I1[ 0 ]
always
begin
	HanhNhi_I1[0] = 1'b0;
	HanhNhi_I1[0] = #20000 1'b1;
	#20000;
end 
// HanhNhi_I2[ 7 ]
initial
begin
	HanhNhi_I2[7] = 1'b0;
end 
// HanhNhi_I2[ 6 ]
initial
begin
	HanhNhi_I2[6] = 1'b0;
end 
// HanhNhi_I2[ 5 ]
initial
begin
	HanhNhi_I2[5] = 1'b0;
end 
// HanhNhi_I2[ 4 ]
initial
begin
	HanhNhi_I2[4] = 1'b0;
	HanhNhi_I2[4] = #640000 1'b1;
end 
// HanhNhi_I2[ 3 ]
initial
begin
	HanhNhi_I2[3] = 1'b0;
	HanhNhi_I2[3] = #320000 1'b1;
	HanhNhi_I2[3] = #320000 1'b0;
	HanhNhi_I2[3] = #320000 1'b1;
end 
// HanhNhi_I2[ 2 ]
initial
begin
	repeat(3)
	begin
		HanhNhi_I2[2] = 1'b0;
		HanhNhi_I2[2] = #160000 1'b1;
		# 160000;
	end
	HanhNhi_I2[2] = 1'b0;
end 
// HanhNhi_I2[ 1 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I2[1] = 1'b0;
		HanhNhi_I2[1] = #80000 1'b1;
		# 80000;
	end
	HanhNhi_I2[1] = 1'b0;
end 
// HanhNhi_I2[ 0 ]
initial
begin
	repeat(12)
	begin
		HanhNhi_I2[0] = 1'b0;
		HanhNhi_I2[0] = #40000 1'b1;
		# 40000;
	end
	HanhNhi_I2[0] = 1'b0;
end 
// HanhNhi_I3[ 7 ]
initial
begin
	HanhNhi_I3[7] = 1'b0;
end 
// HanhNhi_I3[ 6 ]
initial
begin
	HanhNhi_I3[6] = 1'b0;
end 
// HanhNhi_I3[ 5 ]
initial
begin
	HanhNhi_I3[5] = 1'b0;
end 
// HanhNhi_I3[ 4 ]
initial
begin
	HanhNhi_I3[4] = 1'b0;
	HanhNhi_I3[4] = #960000 1'b1;
end 
// HanhNhi_I3[ 3 ]
initial
begin
	HanhNhi_I3[3] = 1'b0;
	HanhNhi_I3[3] = #480000 1'b1;
	HanhNhi_I3[3] = #480000 1'b0;
end 
// HanhNhi_I3[ 2 ]
initial
begin
	repeat(2)
	begin
		HanhNhi_I3[2] = 1'b0;
		HanhNhi_I3[2] = #240000 1'b1;
		# 240000;
	end
	HanhNhi_I3[2] = 1'b0;
end 
// HanhNhi_I3[ 1 ]
initial
begin
	repeat(4)
	begin
		HanhNhi_I3[1] = 1'b0;
		HanhNhi_I3[1] = #120000 1'b1;
		# 120000;
	end
	HanhNhi_I3[1] = 1'b0;
end 
// HanhNhi_I3[ 0 ]
initial
begin
	repeat(8)
	begin
		HanhNhi_I3[0] = 1'b0;
		HanhNhi_I3[0] = #60000 1'b1;
		# 60000;
	end
	HanhNhi_I3[0] = 1'b0;
end 
// HanhNhi_I4[ 7 ]
always
begin
	HanhNhi_I4[7] = 1'b0;
	HanhNhi_I4[7] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 6 ]
always
begin
	HanhNhi_I4[6] = 1'b0;
	HanhNhi_I4[6] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 5 ]
always
begin
	HanhNhi_I4[5] = 1'b0;
	HanhNhi_I4[5] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 4 ]
always
begin
	HanhNhi_I4[4] = 1'b0;
	HanhNhi_I4[4] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 3 ]
always
begin
	HanhNhi_I4[3] = 1'b0;
	HanhNhi_I4[3] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 2 ]
always
begin
	HanhNhi_I4[2] = 1'b0;
	HanhNhi_I4[2] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 1 ]
always
begin
	HanhNhi_I4[1] = 1'b0;
	HanhNhi_I4[1] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I4[ 0 ]
always
begin
	HanhNhi_I4[0] = 1'b0;
	HanhNhi_I4[0] = #50000 1'b1;
	#50000;
end 
// HanhNhi_I5[ 7 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[7] = 1'b0;
		HanhNhi_I5[7] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[7] = 1'b0;
	HanhNhi_I5[7] = #75000 1'b1;
end 
// HanhNhi_I5[ 6 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[6] = 1'b0;
		HanhNhi_I5[6] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[6] = 1'b0;
	HanhNhi_I5[6] = #75000 1'b1;
end 
// HanhNhi_I5[ 5 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[5] = 1'b0;
		HanhNhi_I5[5] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[5] = 1'b0;
	HanhNhi_I5[5] = #75000 1'b1;
end 
// HanhNhi_I5[ 4 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[4] = 1'b0;
		HanhNhi_I5[4] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[4] = 1'b0;
	HanhNhi_I5[4] = #75000 1'b1;
end 
// HanhNhi_I5[ 3 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[3] = 1'b0;
		HanhNhi_I5[3] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[3] = 1'b0;
	HanhNhi_I5[3] = #75000 1'b1;
end 
// HanhNhi_I5[ 2 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[2] = 1'b0;
		HanhNhi_I5[2] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[2] = 1'b0;
	HanhNhi_I5[2] = #75000 1'b1;
end 
// HanhNhi_I5[ 1 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[1] = 1'b0;
		HanhNhi_I5[1] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[1] = 1'b0;
	HanhNhi_I5[1] = #75000 1'b1;
end 
// HanhNhi_I5[ 0 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_I5[0] = 1'b0;
		HanhNhi_I5[0] = #75000 1'b1;
		# 75000;
	end
	HanhNhi_I5[0] = 1'b0;
	HanhNhi_I5[0] = #75000 1'b1;
end 
// HanhNhi_I6[ 7 ]
initial
begin
	HanhNhi_I6[7] = 1'b0;
end 
// HanhNhi_I6[ 6 ]
initial
begin
	HanhNhi_I6[6] = 1'b0;
end 
// HanhNhi_I6[ 5 ]
initial
begin
	HanhNhi_I6[5] = 1'b0;
end 
// HanhNhi_I6[ 4 ]
initial
begin
	HanhNhi_I6[4] = 1'b0;
end 
// HanhNhi_I6[ 3 ]
initial
begin
	HanhNhi_I6[3] = 1'b0;
end 
// HanhNhi_I6[ 2 ]
initial
begin
	HanhNhi_I6[2] = 1'b0;
	HanhNhi_I6[2] = #800000 1'b1;
end 
// HanhNhi_I6[ 1 ]
initial
begin
	HanhNhi_I6[1] = 1'b0;
	HanhNhi_I6[1] = #400000 1'b1;
	HanhNhi_I6[1] = #400000 1'b0;
end 
// HanhNhi_I6[ 0 ]
initial
begin
	repeat(2)
	begin
		HanhNhi_I6[0] = 1'b0;
		HanhNhi_I6[0] = #200000 1'b1;
		# 200000;
	end
	HanhNhi_I6[0] = 1'b0;
end 
// HanhNhi_I7[ 7 ]
initial
begin
	HanhNhi_I7[7] = 1'b0;
end 
// HanhNhi_I7[ 6 ]
initial
begin
	HanhNhi_I7[6] = 1'b0;
end 
// HanhNhi_I7[ 5 ]
initial
begin
	HanhNhi_I7[5] = 1'b0;
end 
// HanhNhi_I7[ 4 ]
initial
begin
	HanhNhi_I7[4] = 1'b0;
end 
// HanhNhi_I7[ 3 ]
initial
begin
	HanhNhi_I7[3] = 1'b0;
end 
// HanhNhi_I7[ 2 ]
initial
begin
	HanhNhi_I7[2] = 1'b0;
	HanhNhi_I7[2] = #840000 1'b1;
end 
// HanhNhi_I7[ 1 ]
initial
begin
	HanhNhi_I7[1] = 1'b0;
	HanhNhi_I7[1] = #420000 1'b1;
	HanhNhi_I7[1] = #420000 1'b0;
end 
// HanhNhi_I7[ 0 ]
initial
begin
	repeat(2)
	begin
		HanhNhi_I7[0] = 1'b0;
		HanhNhi_I7[0] = #210000 1'b1;
		# 210000;
	end
	HanhNhi_I7[0] = 1'b0;
end 
// HanhNhi_S[ 2 ]
initial
begin
	HanhNhi_S[2] = 1'b0;
	HanhNhi_S[2] = #320000 1'b1;
	HanhNhi_S[2] = #320000 1'b0;
	HanhNhi_S[2] = #320000 1'b1;
end 
// HanhNhi_S[ 1 ]
initial
begin
	repeat(3)
	begin
		HanhNhi_S[1] = 1'b0;
		HanhNhi_S[1] = #160000 1'b1;
		# 160000;
	end
	HanhNhi_S[1] = 1'b0;
end 
// HanhNhi_S[ 0 ]
initial
begin
	repeat(6)
	begin
		HanhNhi_S[0] = 1'b0;
		HanhNhi_S[0] = #80000 1'b1;
		# 80000;
	end
	HanhNhi_S[0] = 1'b0;
end 
endmodule

