// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2024 19:36:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] HanhNhi_address;
reg HanhNhi_Clock;
reg [3:0] HanhNhi_data;
reg HanhNhi_wren;
// wires                                               
wire [3:0] HanhNhi_q;

// assign statements (if any)                          
Assignment2 i1 (
// port map - connection between master ports and signals/registers   
	.HanhNhi_address(HanhNhi_address),
	.HanhNhi_Clock(HanhNhi_Clock),
	.HanhNhi_data(HanhNhi_data),
	.HanhNhi_q(HanhNhi_q),
	.HanhNhi_wren(HanhNhi_wren)
);
initial 
begin 
#200000 $finish;
end 
// HanhNhi_address[ 4 ]
initial
begin
	HanhNhi_address[4] = 1'b0;
	HanhNhi_address[4] = #160000 1'b1;
end 
// HanhNhi_address[ 3 ]
initial
begin
	HanhNhi_address[3] = 1'b0;
	HanhNhi_address[3] = #80000 1'b1;
	HanhNhi_address[3] = #80000 1'b0;
end 
// HanhNhi_address[ 2 ]
initial
begin
	repeat(2)
	begin
		HanhNhi_address[2] = 1'b0;
		HanhNhi_address[2] = #40000 1'b1;
		# 40000;
	end
	HanhNhi_address[2] = 1'b0;
end 
// HanhNhi_address[ 1 ]
always
begin
	HanhNhi_address[1] = 1'b0;
	HanhNhi_address[1] = #20000 1'b1;
	#20000;
end 
// HanhNhi_address[ 0 ]
always
begin
	HanhNhi_address[0] = 1'b0;
	HanhNhi_address[0] = #10000 1'b1;
	#10000;
end 

// HanhNhi_Clock
always
begin
	HanhNhi_Clock = 1'b0;
	HanhNhi_Clock = #5000 1'b1;
	#5000;
end 
// HanhNhi_data[ 3 ]
initial
begin
	HanhNhi_data[3] = 1'b0;
end 
// HanhNhi_data[ 2 ]
initial
begin
	HanhNhi_data[2] = 1'b0;
end 
// HanhNhi_data[ 1 ]
initial
begin
	HanhNhi_data[1] = 1'b0;
end 
// HanhNhi_data[ 0 ]
initial
begin
	HanhNhi_data[0] = 1'b0;
end 

// HanhNhi_wren
initial
begin
	HanhNhi_wren = 1'b0;
end 
endmodule

