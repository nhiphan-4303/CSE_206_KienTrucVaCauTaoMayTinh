// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2024 14:16:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ripple_carry_adder_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ripple_carry_adder_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg HanhNhi_A0;
reg HanhNhi_A1;
reg HanhNhi_A2;
reg HanhNhi_A3;
reg HanhNhi_B0;
reg HanhNhi_B1;
reg HanhNhi_B2;
reg HanhNhi_B3;
// wires                                               
wire HanhNhi_C4;
wire HanhNhi_S0;
wire HanhNhi_S1;
wire HanhNhi_S2;
wire HanhNhi_S3;

// assign statements (if any)                          
ripple_carry_adder_4 i1 (
// port map - connection between master ports and signals/registers   
	.HanhNhi_A0(HanhNhi_A0),
	.HanhNhi_A1(HanhNhi_A1),
	.HanhNhi_A2(HanhNhi_A2),
	.HanhNhi_A3(HanhNhi_A3),
	.HanhNhi_B0(HanhNhi_B0),
	.HanhNhi_B1(HanhNhi_B1),
	.HanhNhi_B2(HanhNhi_B2),
	.HanhNhi_B3(HanhNhi_B3),
	.HanhNhi_C4(HanhNhi_C4),
	.HanhNhi_S0(HanhNhi_S0),
	.HanhNhi_S1(HanhNhi_S1),
	.HanhNhi_S2(HanhNhi_S2),
	.HanhNhi_S3(HanhNhi_S3)
);
initial 
begin 
#180000 $finish;
end 

// HanhNhi_A3
initial
begin
	HanhNhi_A3 = 1'b0;
	HanhNhi_A3 = #80000 1'b1;
	HanhNhi_A3 = #80000 1'b0;
end 

// HanhNhi_A2
initial
begin
	HanhNhi_A2 = 1'b0;
	HanhNhi_A2 = #40000 1'b1;
	HanhNhi_A2 = #40000 1'b0;
	HanhNhi_A2 = #40000 1'b1;
	HanhNhi_A2 = #40000 1'b0;
end 

// HanhNhi_A1
initial
begin
	HanhNhi_A1 = 1'b0;
	HanhNhi_A1 = #20000 1'b1;
	HanhNhi_A1 = #20000 1'b0;
	HanhNhi_A1 = #20000 1'b1;
	HanhNhi_A1 = #20000 1'b0;
	HanhNhi_A1 = #20000 1'b1;
	HanhNhi_A1 = #20000 1'b0;
	HanhNhi_A1 = #20000 1'b1;
	HanhNhi_A1 = #20000 1'b0;
end 

// HanhNhi_A0
initial
begin
	HanhNhi_A0 = 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
	HanhNhi_A0 = #10000 1'b1;
	HanhNhi_A0 = #10000 1'b0;
end 

// HanhNhi_B3
initial
begin
	HanhNhi_B3 = 1'b0;
	HanhNhi_B3 = #80000 1'b1;
	HanhNhi_B3 = #80000 1'b0;
end 

// HanhNhi_B2
initial
begin
	HanhNhi_B2 = 1'b0;
	HanhNhi_B2 = #40000 1'b1;
	HanhNhi_B2 = #40000 1'b0;
	HanhNhi_B2 = #40000 1'b1;
	HanhNhi_B2 = #40000 1'b0;
end 

// HanhNhi_B1
initial
begin
	HanhNhi_B1 = 1'b0;
	HanhNhi_B1 = #20000 1'b1;
	HanhNhi_B1 = #20000 1'b0;
	HanhNhi_B1 = #20000 1'b1;
	HanhNhi_B1 = #20000 1'b0;
	HanhNhi_B1 = #20000 1'b1;
	HanhNhi_B1 = #20000 1'b0;
	HanhNhi_B1 = #20000 1'b1;
	HanhNhi_B1 = #20000 1'b0;
end 

// HanhNhi_B0
initial
begin
	HanhNhi_B0 = 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
	HanhNhi_B0 = #10000 1'b1;
	HanhNhi_B0 = #10000 1'b0;
end 
endmodule

