// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2024 02:54:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg HanhNhi_A;
reg HanhNhi_B;
reg HanhNhi_C;
reg HanhNhi_D;
// wires                                               
wire HanhNhi_GEW;
wire HanhNhi_GNS;
wire HanhNhi_REW;
wire HanhNhi_RNS;
wire HanhNhi_YEW;
wire HanhNhi_YNS;

// assign statements (if any)                          
Assignment4 i1 (
// port map - connection between master ports and signals/registers   
	.HanhNhi_A(HanhNhi_A),
	.HanhNhi_B(HanhNhi_B),
	.HanhNhi_C(HanhNhi_C),
	.HanhNhi_D(HanhNhi_D),
	.HanhNhi_GEW(HanhNhi_GEW),
	.HanhNhi_GNS(HanhNhi_GNS),
	.HanhNhi_REW(HanhNhi_REW),
	.HanhNhi_RNS(HanhNhi_RNS),
	.HanhNhi_YEW(HanhNhi_YEW),
	.HanhNhi_YNS(HanhNhi_YNS)
);
initial 
begin 
#200000 $finish;
end 

// HanhNhi_A
initial
begin
	HanhNhi_A = 1'b0;
	HanhNhi_A = #80000 1'b1;
	HanhNhi_A = #80000 1'b0;
end 

// HanhNhi_B
initial
begin
	HanhNhi_B = 1'b0;
	HanhNhi_B = #40000 1'b1;
	HanhNhi_B = #40000 1'b0;
	HanhNhi_B = #40000 1'b1;
	HanhNhi_B = #40000 1'b0;
end 

// HanhNhi_C
initial
begin
	HanhNhi_C = 1'b0;
	HanhNhi_C = #20000 1'b1;
	HanhNhi_C = #20000 1'b0;
	HanhNhi_C = #20000 1'b1;
	HanhNhi_C = #20000 1'b0;
	HanhNhi_C = #20000 1'b1;
	HanhNhi_C = #20000 1'b0;
	HanhNhi_C = #20000 1'b1;
	HanhNhi_C = #20000 1'b0;
end 

// HanhNhi_D
initial
begin
	HanhNhi_D = 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
	HanhNhi_D = #10000 1'b1;
	HanhNhi_D = #10000 1'b0;
end 
endmodule

