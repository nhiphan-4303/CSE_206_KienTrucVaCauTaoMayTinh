// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 08:37:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg HNhi_CLEAR;
reg HNhi_CLOCK;
reg [23:0] HNhi_q;
reg HNhi_WREN;
// wires                                               
wire [7:0] HNhi_Offset;
wire [2:0] HNhi_OperationCode;
wire [2:0] HNhi_RegA;
wire [2:0] HNhi_RegB;
wire [2:0] HNhi_RegC;

// assign statements (if any)                          
Assignment4 i1 (
// port map - connection between master ports and signals/registers   
	.HNhi_CLEAR(HNhi_CLEAR),
	.HNhi_CLOCK(HNhi_CLOCK),
	.HNhi_Offset(HNhi_Offset),
	.HNhi_OperationCode(HNhi_OperationCode),
	.HNhi_q(HNhi_q),
	.HNhi_RegA(HNhi_RegA),
	.HNhi_RegB(HNhi_RegB),
	.HNhi_RegC(HNhi_RegC),
	.HNhi_WREN(HNhi_WREN)
);
initial 
begin 
#200000 $finish;
end 

// HNhi_CLEAR
initial
begin
	HNhi_CLEAR = 1'b0;
end 

// HNhi_CLOCK
always
begin
	HNhi_CLOCK = 1'b0;
	HNhi_CLOCK = #5000 1'b1;
	#5000;
end 

// HNhi_WREN
initial
begin
	HNhi_WREN = 1'b1;
end 
// HNhi_q[ 23 ]
initial
begin
	HNhi_q[23] = 1'b0;
end 
// HNhi_q[ 22 ]
initial
begin
	HNhi_q[22] = 1'b1;
end 
// HNhi_q[ 21 ]
initial
begin
	HNhi_q[21] = 1'b0;
end 
// HNhi_q[ 20 ]
initial
begin
	HNhi_q[20] = 1'b1;
end 
// HNhi_q[ 19 ]
initial
begin
	HNhi_q[19] = 1'b0;
end 
// HNhi_q[ 18 ]
initial
begin
	HNhi_q[18] = 1'b0;
end 
// HNhi_q[ 17 ]
initial
begin
	HNhi_q[17] = 1'b0;
end 
// HNhi_q[ 16 ]
initial
begin
	HNhi_q[16] = 1'b0;
end 
// HNhi_q[ 15 ]
initial
begin
	HNhi_q[15] = 1'b0;
end 
// HNhi_q[ 14 ]
initial
begin
	HNhi_q[14] = 1'b0;
end 
// HNhi_q[ 13 ]
initial
begin
	HNhi_q[13] = 1'b0;
end 
// HNhi_q[ 12 ]
initial
begin
	HNhi_q[12] = 1'b0;
end 
// HNhi_q[ 11 ]
initial
begin
	HNhi_q[11] = 1'b0;
end 
// HNhi_q[ 10 ]
initial
begin
	HNhi_q[10] = 1'b0;
end 
// HNhi_q[ 9 ]
initial
begin
	HNhi_q[9] = 1'b0;
end 
// HNhi_q[ 8 ]
initial
begin
	HNhi_q[8] = 1'b1;
end 
// HNhi_q[ 7 ]
initial
begin
	HNhi_q[7] = 1'b0;
end 
// HNhi_q[ 6 ]
initial
begin
	HNhi_q[6] = 1'b0;
end 
// HNhi_q[ 5 ]
initial
begin
	HNhi_q[5] = 1'b0;
end 
// HNhi_q[ 4 ]
initial
begin
	HNhi_q[4] = 1'b0;
	HNhi_q[4] = #150000 1'b1;
end 
// HNhi_q[ 3 ]
initial
begin
	HNhi_q[3] = 1'b0;
	HNhi_q[3] = #70000 1'b1;
	HNhi_q[3] = #80000 1'b0;
end 
// HNhi_q[ 2 ]
initial
begin
	HNhi_q[2] = 1'b0;
	# 30000;
	repeat(2)
	begin
		HNhi_q[2] = 1'b1;
		HNhi_q[2] = #40000 1'b0;
		# 40000;
	end
	HNhi_q[2] = 1'b1;
end 
// HNhi_q[ 1 ]
initial
begin
	HNhi_q[1] = 1'b0;
	# 10000;
	repeat(4)
	begin
		HNhi_q[1] = 1'b1;
		HNhi_q[1] = #20000 1'b0;
		# 20000;
	end
	HNhi_q[1] = 1'b1;
	HNhi_q[1] = #20000 1'b0;
end 
// HNhi_q[ 0 ]
initial
begin
	repeat(9)
	begin
		HNhi_q[0] = 1'b1;
		HNhi_q[0] = #10000 1'b0;
		# 10000;
	end
	HNhi_q[0] = 1'b1;
	HNhi_q[0] = #10000 1'b0;
end 
endmodule

