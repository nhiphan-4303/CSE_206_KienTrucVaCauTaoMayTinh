// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2024 15:45:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Assignment2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Assignment2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] ADDR_IN;
reg HNhi_CLEAR;
reg HNhi_CLOCk;
reg HNhi_WREN;
reg LOAD_INCN;
// wires                                               
wire [7:0] HNhi_ADDR_OUT;

// assign statements (if any)                          
Assignment2 i1 (
// port map - connection between master ports and signals/registers   
	.ADDR_IN(ADDR_IN),
	.HNhi_ADDR_OUT(HNhi_ADDR_OUT),
	.HNhi_CLEAR(HNhi_CLEAR),
	.HNhi_CLOCk(HNhi_CLOCk),
	.HNhi_WREN(HNhi_WREN),
	.LOAD_INCN(LOAD_INCN)
);
initial 
begin 
#200000 $finish;
end 
// ADDR_IN[ 7 ]
initial
begin
	ADDR_IN[7] = 1'b0;
end 
// ADDR_IN[ 6 ]
initial
begin
	ADDR_IN[6] = 1'b0;
end 
// ADDR_IN[ 5 ]
initial
begin
	ADDR_IN[5] = 1'b0;
	ADDR_IN[5] = #80000 1'b1;
	ADDR_IN[5] = #20000 1'b0;
end 
// ADDR_IN[ 4 ]
initial
begin
	ADDR_IN[4] = 1'b0;
	ADDR_IN[4] = #20000 1'b1;
	ADDR_IN[4] = #30000 1'b0;
	ADDR_IN[4] = #30000 1'b1;
	ADDR_IN[4] = #20000 1'b0;
end 
// ADDR_IN[ 3 ]
initial
begin
	ADDR_IN[3] = 1'b0;
end 
// ADDR_IN[ 2 ]
initial
begin
	ADDR_IN[2] = 1'b0;
	ADDR_IN[2] = #20000 1'b1;
	ADDR_IN[2] = #30000 1'b0;
end 
// ADDR_IN[ 1 ]
initial
begin
	ADDR_IN[1] = 1'b0;
	ADDR_IN[1] = #80000 1'b1;
	ADDR_IN[1] = #20000 1'b0;
end 
// ADDR_IN[ 0 ]
initial
begin
	ADDR_IN[0] = 1'b0;
end 

// LOAD_INCN
initial
begin
	LOAD_INCN = 1'b0;
	LOAD_INCN = #20000 1'b1;
	LOAD_INCN = #30000 1'b0;
	LOAD_INCN = #30000 1'b1;
	LOAD_INCN = #20000 1'b0;
end 

// HNhi_CLEAR
initial
begin
	HNhi_CLEAR = 1'b0;
end 

// HNhi_CLOCk
always
begin
	HNhi_CLOCk = 1'b0;
	HNhi_CLOCk = #10000 1'b1;
	#10000;
end 

// HNhi_WREN
initial
begin
	HNhi_WREN = 1'b1;
end 
endmodule

